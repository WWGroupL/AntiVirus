#pragma once

namespace MalwareScanner {

	using namespace System;
	using namespace System::IO;
	using namespace System::ComponentModel;
	using namespace System::Collections;
	using namespace System::Windows::Forms;
	using namespace System::Data;
	using namespace System::Drawing;
	using namespace Microsoft::Win32;

	/// <summary>
	/// Summary for scan_report
	/// </summary>
	public ref class live_scan_report : public System::Windows::Forms::Form
	{
	public:
		live_scan_report(void)
		{
			InitializeComponent();
			//
			//TODO: Add the constructor code here
			//
		}

	protected:
		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		~live_scan_report()
		{
			if (components)
			{
				delete components;
			}
		}

	protected:

	private: System::Windows::Forms::ProgressBar^ progressBar1;

	private: System::Windows::Forms::Label^ lblTitle;
	private: System::Windows::Forms::ListBox^ scan_results_list;

	private:
		/// <summary>
		/// Required designer variable.
		/// </summary>
		System::ComponentModel::Container ^components;

#pragma region Windows Form Designer generated code
		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		void InitializeComponent(void)
		{
			System::ComponentModel::ComponentResourceManager^ resources = (gcnew System::ComponentModel::ComponentResourceManager(live_scan_report::typeid));
			this->progressBar1 = (gcnew System::Windows::Forms::ProgressBar());
			this->lblTitle = (gcnew System::Windows::Forms::Label());
			this->scan_results_list = (gcnew System::Windows::Forms::ListBox());
			this->SuspendLayout();
			// 
			// progressBar1
			// 
			this->progressBar1->ForeColor = System::Drawing::SystemColors::ControlText;
			this->progressBar1->Location = System::Drawing::Point(12, 659);
			this->progressBar1->Name = L"progressBar1";
			this->progressBar1->Size = System::Drawing::Size(1318, 25);
			this->progressBar1->Style = System::Windows::Forms::ProgressBarStyle::Continuous;
			this->progressBar1->TabIndex = 1;
			this->progressBar1->Value = 66;
			// 
			// lblTitle
			// 
			this->lblTitle->AutoSize = true;
			this->lblTitle->Font = (gcnew System::Drawing::Font(L"Times New Roman", 36, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->lblTitle->ForeColor = System::Drawing::SystemColors::ControlLightLight;
			this->lblTitle->Location = System::Drawing::Point(449, 35);
			this->lblTitle->Name = L"lblTitle";
			this->lblTitle->Size = System::Drawing::Size(461, 55);
			this->lblTitle->TabIndex = 3;
			this->lblTitle->Text = L"Scanning In Progress...";
			// 
			// scan_results_list
			// 
			this->scan_results_list->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(66)),
				static_cast<System::Int32>(static_cast<System::Byte>(66)), static_cast<System::Int32>(static_cast<System::Byte>(66)));
			this->scan_results_list->BorderStyle = System::Windows::Forms::BorderStyle::FixedSingle;
			this->scan_results_list->Font = (gcnew System::Drawing::Font(L"Consolas", 12, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->scan_results_list->ForeColor = System::Drawing::SystemColors::Info;
			this->scan_results_list->FormattingEnabled = true;
			this->scan_results_list->HorizontalScrollbar = true;
			this->scan_results_list->ItemHeight = 19;
			this->scan_results_list->Location = System::Drawing::Point(12, 114);
			this->scan_results_list->Name = L"scan_results_list";
			this->scan_results_list->Size = System::Drawing::Size(1318, 515);
			this->scan_results_list->TabIndex = 4;
			this->scan_results_list->SelectedIndexChanged += gcnew System::EventHandler(this, &live_scan_report::scan_results_list_SelectedIndexChanged);
			// 
			// live_scan_report
			// 
			this->AutoScaleDimensions = System::Drawing::SizeF(6, 14);
			this->AutoScaleMode = System::Windows::Forms::AutoScaleMode::Font;
			this->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(36)), static_cast<System::Int32>(static_cast<System::Byte>(36)),
				static_cast<System::Int32>(static_cast<System::Byte>(36)));
			this->ClientSize = System::Drawing::Size(1357, 696);
			this->Controls->Add(this->scan_results_list);
			this->Controls->Add(this->lblTitle);
			this->Controls->Add(this->progressBar1);
			this->Font = (gcnew System::Drawing::Font(L"Times New Roman", 8.25F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->ForeColor = System::Drawing::SystemColors::Menu;
			this->Icon = (cli::safe_cast<System::Drawing::Icon^>(resources->GetObject(L"$this.Icon")));
			this->MaximizeBox = false;
			this->MinimizeBox = false;
			this->Name = L"live_scan_report";
			this->StartPosition = System::Windows::Forms::FormStartPosition::CenterScreen;
			this->Text = L"Scanning...";
			this->Load += gcnew System::EventHandler(this, &live_scan_report::scan_report_Load);
			this->ResumeLayout(false);
			this->PerformLayout();

		}
#pragma endregion
	private: System::Void scan_report_Load(System::Object^ sender, System::EventArgs^ e) {
		//Decide what scans to run, based on checkboxes from the form before
		//I'll admit, not very efficent for expansion, but can you blame me Andrew?
		//https://www.c-sharpcorner.com/UploadFile/834980/how-to-pass-data-from-one-form-to-other-form-in-windows-form/
		startUpScan();

	}

	/* --== Scanning functions ==--
	 Written by James Kluver (Startup scan)
	 and
	*/


	/* Startup Scan - James Kluver
	Code snippets from Microsoft's guides
	[1] How to ready registry keys
	https://docs.microsoft.com/en-us/cpp/dotnet/windows-operations-cpp-cli?view=msvc-160#read_registry
	[2] How to write to text files
	https://docs.microsoft.com/en-us/cpp/dotnet/file-handling-and-i-o-cpp-cli?view=msvc-160#write_text
	[3] How to enumarate files
	https://docs.microsoft.com/en-us/cpp/dotnet/file-handling-and-i-o-cpp-cli?view=msvc-160#enumerate
	[4] For string formatting (more just learning what it does, not code samples)
	https://docs.microsoft.com/en-us/dotnet/api/system.string.format?view=net-5.0

	.NET documentation covers the Registry function used here
	https://docs.microsoft.com/en-us/dotnet/api/microsoft.win32.registrykey?view=net-5.0
	*/

	/* namespace this sample uses
	using namespace System;
	using namespace System::IO; - writing to files and reading file system
	using namespace Microsoft::Win32; - reading registry
	*/

	//Functions
	int startUpScan() {
		/*
		Function scans registry and startup files to find what
		programs run on start up
		*/
		//Initate text file which holds the return values [2]
		String^ fileName = "startup_scan_results.txt";
		StreamWriter^ sw = gcnew StreamWriter(fileName);

		//Array of subkey paths to find programs run on startup
		array<String^>^ paths = {
			"Microsoft\\Windows\\CurrentVersion\\Run",
			"Microsoft\\Windows\\CurrentVersion\\RunOnce",
			"Microsoft\\Windows\\CurrentVersion\\RunServices",
			"Microsoft\\Windows\\CurrentVersion\\RunServicesOnce",
			"Microsoft\\Windows\\CurrentVersion\\RunOnce\\Setup",
			"Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\RunOnce\\Setup"
		};

		//Add headers to make it look pretty 
		scan_results_list->BeginUpdate();
		scan_results_list->Items->Add("Startup scan");
		scan_results_list->Items->Add("=========================================================================================================================================================");
		String^ header;
		header = formatItemToList(header, "Name", "Location");
		scan_results_list->Items->Add(header);
		scan_results_list->Items->Add("=========================================================================================================================================================");
		
		//64 bit windows has a registry Wow6432Node for 32-bit processes
		//It's supposed to be a mirror but it isn't - meaning on 64 bit windows we have to look in both places
		//This mean we could get duplicates - these aren't currently handled
		if (Environment::Is64BitOperatingSystem)
		{
			for (int i = 0; i < paths->Length; i++) {
				registryRead("SOFTWARE\\" + paths[i], sw);
				registryRead("SOFTWARE\\Wow6432Node\\" + paths[i], sw);
			}
		}
		else
		{
			for (int i = 0; i < paths->Length; i++) {
				registryRead("SOFTWARE\\" + paths[i], sw);
			}
		}
		scan_results_list->EndUpdate();

		//Enumarate startup directories
		scan_results_list->BeginUpdate();
		directoryRead("C:\\Users\\" + Environment::UserName + "\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup", sw);
		directoryRead("C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Startup", sw);
		scan_results_list->Items->Add("=========================================================================================================================================================");
		scan_results_list->Items->Add("");
		scan_results_list->EndUpdate();

		//Exit gracefully
		sw->Close();
		return 0;
	}

	int registryRead(String^ registryPath, StreamWriter^ sw) {
		/*
		Function will view all keys for a given subkey given in registryPath
		for both HKEY_LOCAL_MACHINE and HKEY_CURRENT_USER root keys [1]
		and write them to open text file via stream writer [2]
		*/
		//Defining recurring local variables
		RegistryKey^ rk = nullptr;
		String^ formattedResult;
		String^ value;

		//First checks the HKEY_LOCAL_MACHINE root
		rk = Registry::LocalMachine->OpenSubKey(registryPath);

		if (rk != nullptr) {
			sw->WriteLine("Key/value pairs within 'HKEY_LOCAL_MACHINE\\{0}' key:", registryPath);
			array<String^>^ names = rk->GetValueNames();
			
			for (int i = 0; i < names->Length; i++) {
				value = rk->GetValue(names[i])->ToString();
				formattedResult = formatItemToList(formattedResult, names[i], value);
				scan_results_list->Items->Add(formattedResult);
				sw->WriteLine(formattedResult);
			}
		}
		else {
			sw->WriteLine("Registry 'HKEY_LOCAL_MACHINE\\{0}' path not found - aborting", registryPath);
		}
		
		//Then checks the HKEY_CURRENT_USER root key
		rk = nullptr;
		rk = Registry::CurrentUser->OpenSubKey(registryPath);

		if (rk != nullptr) {
			sw->WriteLine("Key/value pairs within HKEY_CURRENT_USER\\'{0}' key:", registryPath);
			array<String^>^ names = rk->GetValueNames();
			
			for (int i = 0; i < names->Length; i++) {
				value = rk->GetValue(names[i])->ToString();
				formattedResult = formatItemToList(formattedResult, names[i], value);
				scan_results_list->Items->Add(formattedResult);
				sw->WriteLine(formattedResult);
			}
		}
		else {
			sw->WriteLine("Registry 'HKEY_CURRENT_USER\\{0}' path not found - aborting", registryPath);
		}
		return 0;
	}

	int directoryRead(String^ folder, StreamWriter^ sw) {
		/*
		Function writes list of files in startup file to
		stream writer text file [2,3]
		*/
		try {
			array<String^>^ file = Directory::GetFiles(folder);
		}
		catch (IOException^ e) {
			sw->WriteLine("Path {0} not found - could be invalid or path doesn't exist", folder);
			return 1;
		}

		array<String^>^ file = Directory::GetFiles(folder);
		String^ name;
		String^ formattedResult;
		sw->WriteLine("--== Files inside '{0}' ==--", folder);
		for (int i = 0; i < file->Length; i++) {
			sw->WriteLine(file[i]);
			name = file[i]->Substring((folder->Length + 1));
			formattedResult = formatItemToList(formattedResult, name, file[i]);
			scan_results_list->Items->Add(formattedResult);
		}
		return 0;
	}

	String^ formatItemToList(String^ formatString, String^ column1, String^ column2) {
		formatString = String::Format("{0,-40} |  {1}", column1, column2);
		return formatString;
	}


	/*
	Network scan
	*/
	int networkScan() {
		return 0;
	}
private: System::Void scan_results_list_SelectedIndexChanged(System::Object^ sender, System::EventArgs^ e) {
}
};
}